/*****************************************************************************
**   C A U T I O N                                                          **
**   This file is auto-generated!                                           **
**   If you want to make changes, please see the README.md file.            **
**   Please do not edit this file directly!                                 **
*****************************************************************************/
package de.lancom.openapi.parser.entity

import com.fasterxml.jackson.databind.annotation.JsonDeserialize
import com.fasterxml.jackson.databind.annotation.JsonSerialize
import de.lancom.openapi.common.types.*
import de.lancom.openapi.common.util.*
import de.lancom.openapi.parser.field.Field
import de.lancom.openapi.parser.jackson.EntityDeserializer
import de.lancom.openapi.parser.jackson.EntitySerializer
import de.lancom.openapi.parser.jackson.Parser
import de.lancom.openapi.parser.jackson.Wrapper

// hint:9A1BF04C
@Suppress("PropertyName")
@JsonSerialize(using = Paths.Companion.Serializer::class)
@JsonDeserialize(using = Paths.Companion.Deserializer::class)
data class Paths(
    val _pathItems: Field<Map<String, PathItem?>> = Field.unset(),
    val _extensions: Field<Map<String, Extension?>> = Field.unset(),
    val __field_order: Set<Fields> = Fields.all,
) : Entity {

    ///////////////////////
    //
    // pathItems
    //
    ///////////////////////

    // hint:3A7F9B2E
    val pathItems: Map<String, PathItem?>
        get() = _pathItems.orNull ?: emptyMap()

    // hint:F0C48D71
    fun setPathItemsField(pathItems: Field<Map<String, PathItem?>>): Paths {
        return copy(_pathItems = pathItems)
            .updateFields()
    }

    // hint:8E56A4D9
    fun updatePathItemsField(updater: (Field<Map<String, PathItem?>>) -> Field<Map<String, PathItem?>>): Paths {
        return setPathItemsField(updater(_pathItems))
    }

    // hint:B1D730FC
    fun updatePathItems(updater: (Map<String, PathItem?>) -> Map<String, PathItem?>): Paths {
        return updatePathItemsField { field ->
            field.flatMap { value ->
                Field(updater(value))
            }
        }
    }

    // hint:6542E98A
    fun mergePathItemsField(pathItemsFieldToMerge: Field<Map<String, PathItem?>>): Paths {
        return mergePathItems(pathItemsFieldToMerge.orNull)
    }

    // hint:A8BC6F23
    fun mergePathItems(pathItemsToMerge: Map<String, PathItem?>?): Paths {
        return if (pathItemsToMerge == null) {
            this
        } else {
            val oldPathItems = _pathItems.orNull
            if (oldPathItems == null) {
                setPathItemsField(Field(pathItemsToMerge))
            } else {
                // hint:70A3D8B6
                setPathItems(de.lancom.openapi.parser.util.mergeMap(oldPathItems, pathItemsToMerge))
            }
        }
    }

    // hint:87B3E19C
    fun setPathItems(pathItems: Map<String, PathItem?>): Paths {
        return setPathItemsField(Field(pathItems))
    }

    // hint:D465F782
    fun unsetPathItems(): Paths {
        return setPathItemsField(Field.unset())
    }

    // hint:5C81D396
    fun addPathItems(pathItems: Map<String, PathItem?>): Paths {
        return mergePathItems(pathItems)
    }

    // hint:1A6B37F8
    fun addPathItems(vararg pathItems: Pair<String, PathItem?>): Paths {
        return addPathItems(pathItems.toMap())
    }

    // hint:9D0E4CA5
    fun addPathItem(key: String, value: PathItem?): Paths {
        return addPathItems(key to value)
    }

    // hint:B8F25E73
    fun addPathItem(pair: Pair<String, PathItem?>): Paths {
        return addPathItems(mapOf(pair))
    }

    ///////////////////////
    //
    // extensions
    //
    ///////////////////////

    // hint:3A7F9B2E
    val extensions: Map<String, Extension?>
        get() = _extensions.orNull ?: emptyMap()

    // hint:F0C48D71
    fun setExtensionsField(extensions: Field<Map<String, Extension?>>): Paths {
        return copy(_extensions = extensions)
            .updateFields()
    }

    // hint:8E56A4D9
    fun updateExtensionsField(updater: (Field<Map<String, Extension?>>) -> Field<Map<String, Extension?>>): Paths {
        return setExtensionsField(updater(_extensions))
    }

    // hint:B1D730FC
    fun updateExtensions(updater: (Map<String, Extension?>) -> Map<String, Extension?>): Paths {
        return updateExtensionsField { field ->
            field.flatMap { value ->
                Field(updater(value))
            }
        }
    }

    // hint:6542E98A
    fun mergeExtensionsField(extensionsFieldToMerge: Field<Map<String, Extension?>>): Paths {
        return mergeExtensions(extensionsFieldToMerge.orNull)
    }

    // hint:A8BC6F23
    fun mergeExtensions(extensionsToMerge: Map<String, Extension?>?): Paths {
        return if (extensionsToMerge == null) {
            this
        } else {
            val oldExtensions = _extensions.orNull
            if (oldExtensions == null) {
                setExtensionsField(Field(extensionsToMerge))
            } else {
                // hint:70A3D8B6
                setExtensions(de.lancom.openapi.parser.util.mergeMap(oldExtensions, extensionsToMerge))
            }
        }
    }

    // hint:87B3E19C
    fun setExtensions(extensions: Map<String, Extension?>): Paths {
        return setExtensionsField(Field(extensions))
    }

    // hint:D465F782
    fun unsetExtensions(): Paths {
        return setExtensionsField(Field.unset())
    }

    // hint:5C81D396
    fun addExtensions(extensions: Map<String, Extension?>): Paths {
        return mergeExtensions(extensions)
    }

    // hint:1A6B37F8
    fun addExtensions(vararg extensions: Pair<String, Extension?>): Paths {
        return addExtensions(extensions.toMap())
    }

    // hint:9D0E4CA5
    fun addExtension(key: String, value: Extension?): Paths {
        return addExtensions(key to value)
    }

    // hint:B8F25E73
    fun addExtension(pair: Pair<String, Extension?>): Paths {
        return addExtensions(mapOf(pair))
    }

    // hint:6A81E3FD
    override val entityDescriptor: EntityDescriptor by lazy {
        EntityDescriptor(
            entity = this,
            jsonNode = null,
            map = mapOf(
            ),
            flatMap = listOf(
                _pathItems,
                _extensions,
            ),
            flatten = listOf(
            ),
            order = __field_order.map(Fields::value),
        )
    }

    // hint:49FE6A6F
    override fun toString(): String {
        return this.toYamlString(ignoreOrder = false)
    }

    // hint:20011A4E
    fun getFields(): Set<Fields> {
        val allFields: Set<Fields> = setOfNotNull(
            setOfNotNull<Fields>(
            ),
            _pathItems.getFields()?.map(::Fields)?.toSet(),
            _extensions.getFields()?.map(::Fields)?.toSet(),
        ).flatten().toSet()
        // keep order
        return Fields.cleanupFields(__field_order.filter(allFields::contains).toSet() + allFields)
    }

    // hint:EFD0D818
    fun updateFields(): Paths {
        return copy(__field_order = getFields())
    }

    // hint:A0E5F382
    override fun mergeEntity(other: Entity?): Paths {
        return when (other) {
            null ->
                this

            is Paths ->
                merge(other)

            else ->
                TODO()
        }
    }

    // hint:D6150566
    fun mergeFields(other: Paths): Paths {
        return copy(
            __field_order = Fields.cleanupFields(this.__field_order + other.__field_order),
        ).updateFields()
    }

    // hint:716BFD54
    fun merge(other: Paths?): Paths {
        if (other == null) return this
        return this
            .mergePathItemsField(other._pathItems)
            .mergeExtensionsField(other._extensions)
            .mergeFields(other)
    }

    companion object : Parser<Paths> {

        data class Fields(val value: String) {
            val set: Set<Fields> = setOf(this)

            companion object {
                val all: Set<Fields> = setOf(
                )
                val skip: Set<Fields> = setOf(
                    Fields("pathItems"),
                )

                fun cleanupFields(fields: Iterable<Fields>): Set<Fields> {
                    return fields.filterNot(skip::contains).toSet() + all
                }

                fun fromWrapper(wrapper: Wrapper): Set<Fields> {
                    return cleanupFields(wrapper.fieldOrder.map(::Fields))
                }
            }
        }

        class Serializer : EntitySerializer<Paths>(Paths::class.java, Paths)
        class Deserializer : EntityDeserializer<Paths>(Paths::class.java, Paths)

        // hint:5F72B6D8
        override fun parseWrapper(wrapper: Wrapper): Paths {
            return de.lancom.openapi.parser.jackson.extensionParser(wrapper, ::parseWrapperWithExtensions)
        }

        // hint:2C0E94A7
        fun parseWrapperWithExtensions(
            wrapper: Wrapper,
            extensions: Field<Map<String, Extension?>>,
            fieldOrder: Set<String>,
        ): Paths {
            return Paths(
                _pathItems = wrapper.getUnlessEmpty {
                    getMap {
                        getNullOrElse {
                            getSingle(PathItem::parseEntityOpt)
                        }
                    }
                },
                _extensions = extensions,
                __field_order = fieldOrder.map(::Fields).toSet() + Fields.all,
            )
        }
    }
}
