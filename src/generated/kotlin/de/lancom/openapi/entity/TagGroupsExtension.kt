/*****************************************************************************
**   C A U T I O N                                                          **
**   This file is auto-generated!                                           **
**   If you want to make changes, please see the README.md file.            **
**   Please do not edit this file directly!                                 **
*****************************************************************************/
package de.lancom.openapi.entity

import com.fasterxml.jackson.databind.annotation.JsonDeserialize
import com.fasterxml.jackson.databind.annotation.JsonSerialize
import de.lancom.openapi.field.Field
import de.lancom.openapi.jackson.EntityDeserializer
import de.lancom.openapi.jackson.EntitySerializer
import de.lancom.openapi.jackson.Parser
import de.lancom.openapi.jackson.Wrapper
import de.lancom.openapi.tools.toYamlString

// hint:9A1BF04C
@Suppress("PropertyName")
@JsonSerialize(using = TagGroupsExtension.Companion.Serializer::class)
@JsonDeserialize(using = TagGroupsExtension.Companion.Deserializer::class)
data class TagGroupsExtension(
    val _tags: Field<List<TagGroupsExtensionEntry?>> = Field(emptyList()),
) : ListExtension {

    ///////////////////////
    //
    // tags
    //
    ///////////////////////

    // hint:3A7F9B2E
    val tags: List<TagGroupsExtensionEntry?>
        get() = _tags.orNull ?: emptyList()

    // hint:F0C48D71
    fun setTagsField(tags: Field<List<TagGroupsExtensionEntry?>>): TagGroupsExtension {
        return copy(_tags = tags)
    }

    // hint:8E56A4D9
    fun updateTagsField(updater: (Field<List<TagGroupsExtensionEntry?>>) -> Field<List<TagGroupsExtensionEntry?>>): TagGroupsExtension {
        return setTagsField(updater(_tags))
    }

    // hint:B1D730FC
    fun updateTags(updater: (List<TagGroupsExtensionEntry?>) -> List<TagGroupsExtensionEntry?>): TagGroupsExtension {
        return updateTagsField { field ->
            field.flatMap { value ->
                Field(updater(value))
            }
        }
    }

    // hint:6542E98A
    fun mergeTagsField(tagsFieldToMerge: Field<List<TagGroupsExtensionEntry?>>): TagGroupsExtension {
        return mergeTags(tagsFieldToMerge.orNull)
    }

    // hint:A8BC6F23
    fun mergeTags(tagsToMerge: List<TagGroupsExtensionEntry?>?): TagGroupsExtension {
        return if (tagsToMerge == null) {
            this
        } else {
            val oldTags = _tags.orNull
            if (oldTags == null) {
                setTagsField(Field(tagsToMerge))
            } else {
                // hint:19DE5C87
                setTags((oldTags + tagsToMerge).distinct())
            }
        }
    }

    // hint:87B3E19C
    fun setTags(tags: List<TagGroupsExtensionEntry?>): TagGroupsExtension {
        return setTagsField(Field(tags))
    }

    // hint:D465F782
    fun unsetTags(): TagGroupsExtension {
        return setTagsField(Field.unset())
    }

    // hint:3E9A8C01
    fun addTags(tags: List<TagGroupsExtensionEntry?>): TagGroupsExtension {
        return setTags((this.tags ?: emptyList()) + (tags ?: emptyList()))
    }

    // hint:F7420EB5
    fun addTags(vararg tags: TagGroupsExtensionEntry): TagGroupsExtension {
        return addTags(tags.toList())
    }

    // hint:6A81E3FD
    override val entityDescriptor: EntityDescriptor by lazy {
        EntityDescriptor(
            entity = this,
            jsonNode = null,
            map = mapOf(
            ),
            flatMap = listOf(
            ),
            flatten = listOf(
                _tags,
            ),
        )
    }

    override fun toString(): String {
        return this.toYamlString()
    }

    // hint:A0E5F382
    override fun mergeEntity(other: Entity?): TagGroupsExtension {
        return when (other) {
            null ->
                this

            is TagGroupsExtension ->
                merge(other)

            else ->
                TODO()
        }
    }

    // hint:716BFD54
    fun merge(other: ListExtension?): TagGroupsExtension {
        if (other == null) return this
        if (other !is TagGroupsExtension) TODO()
        return this
            .mergeTagsField(other._tags)
    }

    companion object : Parser<ListExtension> {

        class Serializer : EntitySerializer<ListExtension>(ListExtension::class.java, TagGroupsExtension)
        class Deserializer : EntityDeserializer<ListExtension>(ListExtension::class.java, TagGroupsExtension)

        // hint:5F72B6D8
        override fun parseWrapper(wrapper: Wrapper): ListExtension {
            return TagGroupsExtension(
                _tags = wrapper.getList {
                    getSingle {
                        getNullOrElse {
                            getSingle(TagGroupsExtensionEntry::parseEntityOpt)
                        }
                    }
                },
            )
        }
    }
}
